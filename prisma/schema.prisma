generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Template {
  id                       String                     @id @default(uuid())
  name                     String
  icon                     String
  subject                  String
  to                       String
  templateText             String
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  deletedAt                DateTime?
  OneTemplateHasManyValues OneTemplateHasManyValues[]
  TemplateHistory          TemplateHistory[]
}

model Category {
  id                       String                     @id @default(uuid())
  name                     String
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  deletedAt                DateTime?
  CategoryHistory          CategoryHistory[]
  OneCategoryHasManyValues OneCategoryHasManyValues[]
  OneTemplateHasManyValues OneTemplateHasManyValues[]
}

model OneCategoryHasManyValues {
  id String @id @default(uuid())

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  valueId String
  values  Value  @relation(fields: [valueId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // @@id([categoryId, valueId])
}

model Value {
  id                       String                     @id @default(uuid())
  name                     String
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  deletedAt                DateTime?
  OneCategoryHasManyValues OneCategoryHasManyValues[]
  OneTemplateHasManyValues OneTemplateHasManyValues[]
  ValueHistory             ValueHistory[]
}

model OneTemplateHasManyValues {
  id         String   @id @default(uuid())
  templateId String
  valueId    String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  values     Value    @relation(fields: [valueId], references: [id])
  template   Template @relation(fields: [templateId], references: [id])
}

model TemplateHistory {
  id         String   @id @default(uuid())
  templateId String
  name       String
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())
  template   Template @relation(fields: [templateId], references: [id])
}

model CategoryHistory {
  id         String   @id @default(uuid())
  categoryId String
  name       String
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())
  category   Category @relation(fields: [categoryId], references: [id])
}

model ValueHistory {
  id        String   @id @default(uuid())
  valueId   String
  name      String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  value     Value    @relation(fields: [valueId], references: [id])
}

model Action {
  id      Int       @id @default(autoincrement())
  name    String
  History History[]
}

model History {
  id        String   @id @default(uuid())
  actionId  Int
  json      String
  createdAt DateTime @default(now())
  action    Action   @relation(fields: [actionId], references: [id])
}

model XTable {
  id     Int      @id @default(autoincrement())
  ytable YTable[]
}

model YTable {
  id     Int      @id @default(autoincrement())
  xtable XTable[]
}
