// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Template {
  id                       String                     @id @default(uuid())
  name                     String
  icon                     String
  subject                  String
  to                       String
  templateText             String
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  deletedAt                DateTime?
  OneTemplateHasManyValues OneTemplateHasManyValues[]
  TemplateHistory          TemplateHistory[]
}

model Category {
  id                       String                     @id @default(uuid())
  name                     String
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  deletedAt                DateTime?
  OneCategoryHasManyValues OneCategoryHasManyValues[]
  OneTemplateHasManyValues OneTemplateHasManyValues[]
  CategoryHistory          CategoryHistory[]
}

model OneCategoryHasManyValues {
  id         String   @id @default(uuid())
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  valueId    String
  values     Value    @relation(fields: [valueId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Value {
  id                       String                     @id @default(uuid())
  name                     String
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  deletedAt                DateTime?
  OneCategoryHasManyValues OneCategoryHasManyValues[]
  OneTemplateHasManyValues OneTemplateHasManyValues[]
  ValueHistory             ValueHistory[]
}

model OneTemplateHasManyValues {
  id         String   @id @default(uuid())
  template   Template @relation(fields: [templateId], references: [id])
  templateId String
  valueId    String
  values     Value    @relation(fields: [valueId], references: [id])
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
}

model TemplateHistory {
  id         String   @id @default(uuid())
  templateId String
  template   Template @relation(fields: [templateId], references: [id])
  name       String
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())
}

model CategoryHistory {
  id         String   @id @default(uuid())
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  name       String
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())
}

model ValueHistory {
  id        String   @id @default(uuid())
  valueId   String
  value     Value    @relation(fields: [valueId], references: [id])
  name      String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}
